#include<stdio.h>
#include<unistd.h>
int main()
{
        int pipefds1[2],pipefds2[2],returnstatus1,returnstatus2,pid;
        char pipe1writemessage[20]={"Hi"};
        char pipe2writemessage[20]={"Hello"};
        char readmessage[20];
        returnstatus1 = pipe(pipefds1);
        if(returnstatus1 == -1)
        {
                printf("Unable\n");
        }
        returnstatus2 = pipe(pipefds2);
        if(returnstatus2 == -1)
        {
                printf("Unable");
        }
        pid = fork();
        if(pid != 0)
        {
                close(pipefds1[0]);
                                close(pipefds2[1]);
                                printf("Parrent writing from pipe 1 is %s\n",pipe1writemessage);
                                write(pipefds1[1],pipe1writemessage,sizeof(pipe1writemessage));
                                read(pipefds2[0],readmessage,sizeof(readmessage));
                                printf("Parent reading from pipe 1 is %s\n",readmessage);
        }
        else
        {
                close(pipefds1[1]);
                close(pipefds2[2]);
                read(pipefds1[0],readmessage,sizeof(readmessage));
                printf("Child process reading from pipe2 is %s\n",readmessage);
                printf("child process writing from pipe2 is %s\n",pipe2writemessage);
                write(pipefds2[1],pipe2writemessage,sizeof(pipe2writemessage));
        }
        return 0;
}